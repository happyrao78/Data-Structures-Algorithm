class Solution {
public:
// two pointer approach
    void moveZeroes(vector<int>& nums) {
        int j=-1; //j ko -1 rkha
        int n=nums.size();
        for(int i=0;i<n;i++){
            if(nums[i]==0){
                j=i;  // phle pointer ko 0 pe rkha i.ej humesha zero ko point krega
                break;
            }
        }
        if(j==-1) return; // non zero values hai sari to return nothing.
        for(int i=j+1;i<n;i++){
            if(nums[i]!=0){
                swap(nums[i],nums[j]); // swap krdo zero and non zero values ko apas me and aise zeros last me chale jayege
                j++; // shift the j index to next zeroth element
            }
        }
    }
};
optimal Solution:
TC=O(n)
SC=O(1)
---------------------------------------------------------------
Brute force :
Suppose, there are N-X zeros and X non-zero elements in the array. We will first copy those X non-zero elements from the original array to a temporary array.Then, we will copy the elements from the temporary array one by one and fill the first X places of the original array. 
The last N-X places of the original array will be then filled with zero. Now, our task is completed.

vector<int> moveZeros(int n, vector<int> a) {
    //temporary array:
    vector<int> temp;
    //copy non-zero elements
    //from original -> temp array:
    for (int i = 0; i < n; i++) {
        if (a[i] != 0)
            temp.push_back(a[i]);
    }

    // number of non-zero elements hoge total = jitna size hoga temp array ka utna
    int nz = temp.size();

    //copy elements from temp
    //fill first nz fields of
    //original array:
    for (int i = 0; i < nz; i++) {
        a[i] = temp[i];
    }

    //fill rest of the cells with 0:
    for (int i = nz; i < n; i++) {
        a[i] = 0;
    }
    return a;
}

Time Complexity: O(N) + O(X) + O(N-X) ~ O(2*N), where N = total no. of elements,
X = no. of non-zero elements, and N-X = total no. of zeros.
Reason: O(N) for copying non-zero elements from the original to the temporary array. O(X) for again copying it back from the temporary to the original array. O(N-X) for filling zeros in the original array. So, the total time complexity will be O(2*N).

Space Complexity: O(N), as we are using a temporary array to solve this problem and the maximum size of the array can be N in the worst case.
Reason: The temporary array stores the non-zero elements. In the worst case, all the given array elements will be non-zero.