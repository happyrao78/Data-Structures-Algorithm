four sum problem 

brute force:
tc=o(n4)
sc=o(no. of quads)*2
----------------------

better approach:
tc=o(n3)+log(m) for inserting the values in the set data strucutre, and it would be reduced to o(1) depending upon which data strucutrewe are using 
sc=o(n)+o(no. of quads) *2;
vector<vector<int>> foursum(vector<vector<int>> arr,int n, int target){
    set<vector<int>> st;
    for(int i=0;i<n;i++){
        for(int j=i+1;j<n;j++){
            for(int k=j+1;k<n;k++){
                int sum= arr[i];
                sum+=arr[j];
                aum+=arr[l];
                int fourth = target -sum;
                set<int> hashset;
                if(hashset.find(fourth) != hashset.end()){
                    vector<int> temp={arr[i],arr[j],arr[k],(int)(fourth)};
                    sort(temp.begin(),temp.end());
                    st.insert(temp);
                }
                hashset.insert(arr[k]);
            }
        }
    }
    vector<vector<int>> res(st.begin(),st.end());
    return res;
}
-------------------

optimal approach:
tc=o(n3)
sc=o(no of quads)

two pointer approach
vector<vector<int>> foursum(vector<int> arr, int n,int  target){
    sort(arr.begin(),arr.end());
    vector<vector<int>> res;
    for(int i=0;i<n+;i++){
        if(i > 0 && arr[i]==arr[i-1]) continue;
        for(int j=i+1;j<n;j++){
            if(j !=(i+1) && arr[j]==arr[j-1]) continue;
            int k=j+1;
            int l=n-1;
            if(k < l){
                long long sum=arr[i];
                sum+=arr[j];
                sum+=arr[k];
                sum+=arr[l];
                if(sum == target){
                    vector<int> temp={arr[i],arr[j],arr[k],arr[l]};
                    res.push_back(temp);
                    k++;l--;
                    while(k<l && arr[k]==arr[k-1]) k++;
                    while(k<l && arr[l]==arr[l+1]) l--;
                }
                else if( sum < 0) k++;
                else l--;
            }
        }
    }
    return ans;
}
