reverse pairs

ese pairs ka count return kro jisme arr[i] > 2*arr[j]

brute force:

int returnPairs(vector<int> &arr,int n){
    int count=0;
    for(auto i=0;i<n;i++){
        for(auto j=i+1;j<n;j++){
            if(arr[i] > 2* arr[j]){
                count++;
            }
        }
    }
    return count;
}

tc=o(n2), sc=o(1);
------------------------------------------------------

optimal solution:

tc=o(2nlogn), sc=o(n)

void merge(vector<int> &arr,int low,int mid,int high){
    int left=low;
    int right=mid+1;
    vector<int> temp;
    while(left<=mid && right<=high){
        if(arr[left]<=arr[right]){
            temp.push_back(arr[elft]);
            left++;
        }
        else{
            temp.push_back(arr[right]);
            right++;
        }
    }
    while(left<=mid){
        temp.push_back(arr[left]);
        left++;
    }
    while(right<=high){
        temp.push_back(arr[right]);
        right++;
    }
    for(auto i=low;i<=high;i++){
        arr[i]=temp[i-low];
    }
}

int CountPairs(vector<int> &arr,int low,int mid,int high){
    int right=mid+1;
    int cnt=0;
    for(int i=low;i<=high;i++){
        while(right<=high && (long long)arr[i] > 2LL * arr[right]){
            right++;
        }
        cnt+=(right-(mid+1));
    }
}

int mergeSort(vector<int> &arr,int low,int high){
    int mid=(low+mid)/2;
    int cnt=0;
    cnt+=mergeSort(arr,low,mid);
    cnt+=mergeSort(arr,mid+1,high);
    cnt+=CountPairs(arr,low,mid,high);
    merge(arr,low,mid,high);
    return cnt;

}

int returnPairs(vector<int> &arr,int n){
    return mergeSort(arr,0,n-1); // this will directly return the count of pairs
}
