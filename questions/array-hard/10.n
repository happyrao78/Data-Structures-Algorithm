count inversions in array

brute force:
tc=o(n2), sc=o(1);

int countnversions(int arr, int n){
int cnt=0;
for(int i=0;i<n;i++){
    for(int j=i+1;j<n-1;j++){
        if(arr[i]>arr[j]){
            cnt++;
        }
    }
}
return cnt;
}
----------------------

optimal solution :
using merge sort and without using the global varible. we will be distoring the array but if asked in interview , then we will learify that here we have distorted the array but we can also use the copy of array so as to prevent the data integration.

tc=o(nlogn), sc=o(n);
int merge(int *arr,int low,int mid, int high){
    int left=low;
    int right=mid+1;
    int cnt=0;
    vector<int>temp;
    while(left<=mid && right<=high){
        if(arr[left]<=arr[right]){
            temp.push_back(arr[left]);
            left++;
        }

        else{
            temp.push_back(arr[right]);
            cnt+=(mid-left+1);
            right++;
        }
    }
    while(left<=mid){
        temp.push_back(arr[left]);
        left++;
    }
    while(right<=high){
        temp.push_back(arr[right]);
        right++;
    }
    for(auto i=low;i<=high;i++){
        arr[i]=temp[i-low];
    }
    return cnt;
}

int mergesort(int *arr,int low,int high){
    int cnt=0;
    int mid=(low+mid)/2;
    if(low>=high) return cnt;
    cnt+=mergesort(arr,low,mid);
    cnt+=mergesort(arr,mid+1,high);
    cnt+=merge(arr,low,mid,high);
    return cnt;
}
int countinversions(int *arr,int n){
    return mergesort(arr,0,n-1);
}