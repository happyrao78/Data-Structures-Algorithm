// variety 2 

- isme hum hashmap use krege 
- code: 

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int,int> mpp;
        int n=nums.size();
        for(int i=0;i<n;i++){
            int num=nums[i];
            int more= target-num;
            if(mpp.find(more)!= mpp.end()){
                return {mpp[more],i};
            }
            mpp[num]=i;
        }
        return {-1,-1};
    }
};
Complexity:
ordered map: 
tc= o(nlogn) sc=o(n) //  same as two pointer approach
unordered map:
tc= o(n) in best and avg case but in worst case scenario o(n2) and sc=o(n)

brute force for variety 2: iterate through each element and i+1 and then check for which two values the sum is equal to target. 
tc=o(n2) and sc=o(1) no extra space we are using in that approach

if we go towards the two pointer approach in case where we have to return the index of array elements than we have to firstly sort the given array which will take nlogn time , and then we also have to store the indexes of each element in another array. so it will take a longer time for large arrays and is not a optimal approach for the variety two.
again tc=o(nlogn) and sc=o(n);
----------------------------------------
// optimal approach for varitey 1

- using two pointer approach where one pointer will point to left and the right pointer to the n-1 end of array  
string twoSum(int n, vector<int> &arr, int target) {
    sort(arr.begin(), arr.end());
    int left = 0, right = n - 1;
    while (left < right) {
        int sum = arr[left] + arr[right];
        if (sum == target) {
            return "YES";
        }
        else if (sum < target) left++;
        else right--;
    }
    return "NO";
}


Time Complexity: O(N) + O(N*logN), where N = size of the array.
Reason: The loop will run at most N times. And sorting the array will take N*logN time complexity.

Space Complexity: O(1) as we are not using any extra space.

brute force me tc=o(n2) and sc=o(1);
better appraoch = ordered map=o(nlogn) and o(n) and unordered map will have tc of o(n) for avg and best case and for worst case it will be tc=o(n2) and sc=o(n);