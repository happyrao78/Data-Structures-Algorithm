// find the next permutation in the array 

brute force =
tc=o(n!*n)

better appraoch= using stl lib:
next_permutation(a.begin(),a.end()); but interviwer might say implement the next permutation function

optimal approach:
tc=o(3n) sc=o(n) as i am changing the original array but the overally time complexity of the algorithm is o(1);
code:

vector<int> nextpermutation(vector<int> arr){
    int n=arr.size();
    int idx=-1;

    // lets find the bp first jha pe graph humara pivot lega

    for(auto i=n-2;i>=0;i--){
        if(arr[i]<arr[i+1]){
            idx=i;
            break;
        }
    }
    koi hai hi nhi to bs reverse krdo array ko nothing else
    if(idx==-1){
        reverse(arr.begin(),arr.end());
        return arr;
    }

    konsi value hai jo next badi hai finded idx value se unko swap krdo yha se
    for(int i=n-1;i>idx;i--){
        if(arr[i]>arr[idx]){
            swap(arr[i],arr[idx]);
            break;
        }
    }
    remaining values ko reverse krdo jo small h bchi hui bs
    reverse(arr.begin()+idx+1,arr.end());
    return arr;
}