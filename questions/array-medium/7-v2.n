// variety two where the number of +ve and -ve values in the the array are not equal, either pos>neg or vice verca
for this we will be using the brute force approach of the previosu varitey one as that will be the most optimal solution for this case.

tc= o(n)+o(n/2)

vector<int> rearrange_variety_two_optimal(vector<int> arr, int n){
    vector<int> pos,neg;
    for(int i=0;i<n;i++){
        if(arr[i]>0){
            pos.push_back(arr[i]);
        }
        else{
            neg.push_back(arr[i]);
        }
    }
    if(pos.size()>neg.size()){
        for(int i=0;i<neg.size();i++){
            arr[2*i]=pos[i];
            arr[2*i+1]=neg[i];
        }
        remaining positive elements hai to unko last me push krdo
        int idx=2*neg.size();
        for(int i=neg.size();i<pos.size();i++){
            arr[idx]=pos[i];
            idx++;
        }
    }
    else{
        for(int i=0;i<pos.size();i++){
            arr[2*i]=pos[i];
            arr[2*i+1]=neg[i];
        }
        int idx=2*pos.size();
        for(int i=pos.size();i<neg.size();i++){
            arr[idx]=neg[i];
            idx++;
        }
    }
    return arr;
}