// best optimal solution - XOR with TC=O(N) and SC=O(1) best solution

int missingNumber(vector<int>&a, int N) {
    // Write your code here.
    int xor1=0;
    int xor2=0;
    for(int j=0;j<N-1;j++){
        xor2^=a[j];
        xor1^=j+1;
    }
    xor1^=N;
    return xor1^xor2;
}

Optimal solution XOR but with TC =O(2N) and SC=O(1)

int missingNumber(vector<int>&a, int N) {
    // Write your code here.
    
    int xor1=0;
    for(int i=0;i<N;i++){
        xor1^=i;
    }
    int xor2=0;
    for(int j=0;j<N-1;j++){
        xor2^=a[j];
    }
    return xor1^xor2;
}
----------------------------------------------------------
Better Solution approach= Using the hashing technique, we will store the frequency of each element of the given array. Now, the number( i.e. between 1 to N) for which the frequency will be 0, will be returned.

The algorithm steps are as follows:

The range of the number is 1 to N. So, we need a hash array of size N+1 (as we want to store the frequency of N as well).
Now, for each element in the given array, we will store the frequency in the hash array.
After that, for each number between 1 to N, we will check the frequencies. And for any number, if the frequency is 0, we will return it.
Dry run:

Assume the given array = {1,3} and N = 3. The hash array will look like the following:
[1,2,3]=[1,0,1]
We can clearly see that for index 2 the frequency is 0 and so 2 is our answer.

code :
int missingNumber(vector<int>&a, int N) {

    int hash[N + 1] = {0}; //hash array

    // storing the frequencies:
    for (int i = 0; i < N - 1; i++)
        hash[a[i]]++;

    //checking the freqencies for numbers 1 to N:
    for (int i = 1; i <= N; i++) {
        if (hash[i] == 0) {
            return i;
        }
    }

    // The following line will never execute.
    // It is just to avoid warnings.
    return -1;
}

Time Complexity: O(N) + O(N) ~ O(2*N),  where N = size of the array+1.
Reason: For storing the frequencies in the hash array, the program takes O(N) time complexity and for checking the frequencies in the second step again O(N) is required. So, the total time complexity is O(N) + O(N).

Space Complexity: O(N), where N = size of the array+1. Here we are using an extra hash array of size N+1.

---------------------------------------------------------------------------------------------------------------------------------------

Brute force : 
For each number between 1 to N, we will try to find it in the given array using linear search. And if we donâ€™t find any of them, we will return the number.

Approach: 

The algorithm steps are as follows:

We will run a loop(say i) from 1 to N.
For each integer, i, we will try to find it in the given array using linear search.
For that, we will run another loop to iterate over the array and consider a flag variable to indicate if the element exists in the array. Flag = 1 means the element is present and flag = 0 means the element is missing.
Initially, the flag value will be set to 0. While iterating the array, if we find the element, we will set the flag to 1 and break out from the loop.
Now, for any number i, if we cannot find it, the flag will remain 0 even after iterating the whole array and we will return the number.
Dry run:

Assume given array = {1, 3} and N = 3.

Note: For each number, before starting the linear search, we set the flag to 0.

For i = 1, flag = 0
We will try to find 1 in the array using linear search and in the first index, we can find it and the flag will be 1. So, it is not the missing number.

For i = 2, flag = 0
We will try to find 2 in the given array using linear search. But number 2 is not present and the flag will remain 0. So, we will return 2 as it is the missing number.

Code : int missingNumber(vector<int>&a, int N) {

    // Outer loop that runs from 1 to N:
    for (int i = 1; i <= N; i++) {

        // flag variable to check
        //if an element exists
        int flag = 0;

        //Search the element using linear search:
        for (int j = 0; j < N - 1; j++) {
            if (a[j] == i) {

                // i is present in the array:
                flag = 1;
                break;
            }
        }

        // check if the element is missing
        //i.e flag == 0:

        if (flag == 0) return i;
    }

    // The following line will never execute.
    // It is just to avoid warnings.
    return -1;
}

Complexities: Time Complexity: O(N2), where N = size of the array+1.
Reason: In the worst case i.e. if the missing number is N itself, the outer loop will run for N times, and for every single number the inner loop will also run for approximately N times. So, the total time complexity will be O(N2).

Space Complexity: O(1)  as we are not using any extra space.