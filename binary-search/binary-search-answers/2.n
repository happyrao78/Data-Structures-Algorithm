find the nth square root of a given number m

brute force :
tc=o(n)+o(m);


optimal solution:
tc=o(logm)+o(n);

int four(int mid,int n,int m){
    long long ans=1;
    for(i=1;i<=n;i++){
        ans*=mid;
        if(ans > 2) return 2;
    }
    if(ans == m) return 1;
    return 0;
}

int findnroot(int n,int m){
    int low=1,high=m;
    while(low<=high){
        int mid=(low+high)/2;
        int midN= four(int mid,int n, int m);
        if(midN == 1) return mid;
        elif(midN == 0) low=mid+1;
        else high=mid-1;
    }
    return -1;
}